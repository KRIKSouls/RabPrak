//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTests
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WaterUtilityEntities1 : DbContext
    {
        public WaterUtilityEntities1()
            : base("name=WaterUtilityEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<Drinking_water_quality_indicator> Drinking_water_quality_indicator { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Place_execution> Place_execution { get; set; }
        public virtual DbSet<Subscriber> Subscriber { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Volume_of_drinking_water_consumption> Volume_of_drinking_water_consumption { get; set; }
        public virtual DbSet<User> User { get; set; }
    
        public virtual int AddCont(Nullable<int> conNum, Nullable<System.DateTime> signDate, Nullable<decimal> pay, Nullable<System.DateTime> finDate, Nullable<int> indNum, Nullable<int> volNum, Nullable<int> tINSup, Nullable<int> subTIN)
        {
            var conNumParameter = conNum.HasValue ?
                new ObjectParameter("ConNum", conNum) :
                new ObjectParameter("ConNum", typeof(int));
    
            var signDateParameter = signDate.HasValue ?
                new ObjectParameter("SignDate", signDate) :
                new ObjectParameter("SignDate", typeof(System.DateTime));
    
            var payParameter = pay.HasValue ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(decimal));
    
            var finDateParameter = finDate.HasValue ?
                new ObjectParameter("FinDate", finDate) :
                new ObjectParameter("FinDate", typeof(System.DateTime));
    
            var indNumParameter = indNum.HasValue ?
                new ObjectParameter("IndNum", indNum) :
                new ObjectParameter("IndNum", typeof(int));
    
            var volNumParameter = volNum.HasValue ?
                new ObjectParameter("VolNum", volNum) :
                new ObjectParameter("VolNum", typeof(int));
    
            var tINSupParameter = tINSup.HasValue ?
                new ObjectParameter("TINSup", tINSup) :
                new ObjectParameter("TINSup", typeof(int));
    
            var subTINParameter = subTIN.HasValue ?
                new ObjectParameter("SubTIN", subTIN) :
                new ObjectParameter("SubTIN", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCont", conNumParameter, signDateParameter, payParameter, finDateParameter, indNumParameter, volNumParameter, tINSupParameter, subTINParameter);
        }
    
        public virtual int AddDrink(Nullable<int> indNum, string ind, string units, string reg, string indicator, Nullable<int> hazard)
        {
            var indNumParameter = indNum.HasValue ?
                new ObjectParameter("IndNum", indNum) :
                new ObjectParameter("IndNum", typeof(int));
    
            var indParameter = ind != null ?
                new ObjectParameter("Ind", ind) :
                new ObjectParameter("Ind", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var regParameter = reg != null ?
                new ObjectParameter("Reg", reg) :
                new ObjectParameter("Reg", typeof(string));
    
            var indicatorParameter = indicator != null ?
                new ObjectParameter("Indicator", indicator) :
                new ObjectParameter("Indicator", typeof(string));
    
            var hazardParameter = hazard.HasValue ?
                new ObjectParameter("Hazard", hazard) :
                new ObjectParameter("Hazard", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrink", indNumParameter, indParameter, unitsParameter, regParameter, indicatorParameter, hazardParameter);
        }
    
        public virtual int AddEmp(Nullable<int> codeEmp, string surname, string name, string midlName, string post, string num)
        {
            var codeEmpParameter = codeEmp.HasValue ?
                new ObjectParameter("CodeEmp", codeEmp) :
                new ObjectParameter("CodeEmp", typeof(int));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var midlNameParameter = midlName != null ?
                new ObjectParameter("MidlName", midlName) :
                new ObjectParameter("MidlName", typeof(string));
    
            var postParameter = post != null ?
                new ObjectParameter("Post", post) :
                new ObjectParameter("Post", typeof(string));
    
            var numParameter = num != null ?
                new ObjectParameter("Num", num) :
                new ObjectParameter("Num", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmp", codeEmpParameter, surnameParameter, nameParameter, midlNameParameter, postParameter, numParameter);
        }
    
        public virtual int AddPlace(Nullable<int> placNum, string title, string address, Nullable<int> subTIN)
        {
            var placNumParameter = placNum.HasValue ?
                new ObjectParameter("PlacNum", placNum) :
                new ObjectParameter("PlacNum", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var subTINParameter = subTIN.HasValue ?
                new ObjectParameter("SubTIN", subTIN) :
                new ObjectParameter("SubTIN", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPlace", placNumParameter, titleParameter, addressParameter, subTINParameter);
        }
    
        public virtual int AddSub(Nullable<int> subTIN, string nameOrg, string checAcc, string dir, string address, string num, Nullable<int> corres)
        {
            var subTINParameter = subTIN.HasValue ?
                new ObjectParameter("SubTIN", subTIN) :
                new ObjectParameter("SubTIN", typeof(int));
    
            var nameOrgParameter = nameOrg != null ?
                new ObjectParameter("NameOrg", nameOrg) :
                new ObjectParameter("NameOrg", typeof(string));
    
            var checAccParameter = checAcc != null ?
                new ObjectParameter("ChecAcc", checAcc) :
                new ObjectParameter("ChecAcc", typeof(string));
    
            var dirParameter = dir != null ?
                new ObjectParameter("Dir", dir) :
                new ObjectParameter("Dir", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var numParameter = num != null ?
                new ObjectParameter("Num", num) :
                new ObjectParameter("Num", typeof(string));
    
            var corresParameter = corres.HasValue ?
                new ObjectParameter("Corres", corres) :
                new ObjectParameter("Corres", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSub", subTINParameter, nameOrgParameter, checAccParameter, dirParameter, addressParameter, numParameter, corresParameter);
        }
    
        public virtual int AddVolume(Nullable<int> volNum, Nullable<int> totalVol, Nullable<decimal> price, Nullable<int> totalMon)
        {
            var volNumParameter = volNum.HasValue ?
                new ObjectParameter("VolNum", volNum) :
                new ObjectParameter("VolNum", typeof(int));
    
            var totalVolParameter = totalVol.HasValue ?
                new ObjectParameter("TotalVol", totalVol) :
                new ObjectParameter("TotalVol", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var totalMonParameter = totalMon.HasValue ?
                new ObjectParameter("TotalMon", totalMon) :
                new ObjectParameter("TotalMon", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVolume", volNumParameter, totalVolParameter, priceParameter, totalMonParameter);
        }
    
        public virtual int DeleteCont(Nullable<int> conNum)
        {
            var conNumParameter = conNum.HasValue ?
                new ObjectParameter("ConNum", conNum) :
                new ObjectParameter("ConNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCont", conNumParameter);
        }
    
        public virtual int DeleteDrink(Nullable<int> indNum)
        {
            var indNumParameter = indNum.HasValue ?
                new ObjectParameter("IndNum", indNum) :
                new ObjectParameter("IndNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDrink", indNumParameter);
        }
    
        public virtual int DeleteEmp(Nullable<int> codeEmp)
        {
            var codeEmpParameter = codeEmp.HasValue ?
                new ObjectParameter("CodeEmp", codeEmp) :
                new ObjectParameter("CodeEmp", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmp", codeEmpParameter);
        }
    
        public virtual int DeletePlace(Nullable<int> placNum)
        {
            var placNumParameter = placNum.HasValue ?
                new ObjectParameter("PlacNum", placNum) :
                new ObjectParameter("PlacNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePlace", placNumParameter);
        }
    
        public virtual int DeleteSub(Nullable<int> subTIN)
        {
            var subTINParameter = subTIN.HasValue ?
                new ObjectParameter("SubTIN", subTIN) :
                new ObjectParameter("SubTIN", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSub", subTINParameter);
        }
    
        public virtual int Deletevalume(Nullable<int> volNum)
        {
            var volNumParameter = volNum.HasValue ?
                new ObjectParameter("VolNum", volNum) :
                new ObjectParameter("VolNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deletevalume", volNumParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateCont(Nullable<int> conNum, Nullable<System.DateTime> signDate, Nullable<decimal> pay, Nullable<System.DateTime> finDate, Nullable<int> indNum, Nullable<int> volNum, Nullable<int> numemp, Nullable<int> subTIN)
        {
            var conNumParameter = conNum.HasValue ?
                new ObjectParameter("ConNum", conNum) :
                new ObjectParameter("ConNum", typeof(int));
    
            var signDateParameter = signDate.HasValue ?
                new ObjectParameter("SignDate", signDate) :
                new ObjectParameter("SignDate", typeof(System.DateTime));
    
            var payParameter = pay.HasValue ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(decimal));
    
            var finDateParameter = finDate.HasValue ?
                new ObjectParameter("FinDate", finDate) :
                new ObjectParameter("FinDate", typeof(System.DateTime));
    
            var indNumParameter = indNum.HasValue ?
                new ObjectParameter("IndNum", indNum) :
                new ObjectParameter("IndNum", typeof(int));
    
            var volNumParameter = volNum.HasValue ?
                new ObjectParameter("VolNum", volNum) :
                new ObjectParameter("VolNum", typeof(int));
    
            var numempParameter = numemp.HasValue ?
                new ObjectParameter("Numemp", numemp) :
                new ObjectParameter("Numemp", typeof(int));
    
            var subTINParameter = subTIN.HasValue ?
                new ObjectParameter("SubTIN", subTIN) :
                new ObjectParameter("SubTIN", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCont", conNumParameter, signDateParameter, payParameter, finDateParameter, indNumParameter, volNumParameter, numempParameter, subTINParameter);
        }
    
        public virtual int UpdateDrink(Nullable<int> indNum, string ind, string units, string reg, string indicator, Nullable<int> hazard)
        {
            var indNumParameter = indNum.HasValue ?
                new ObjectParameter("IndNum", indNum) :
                new ObjectParameter("IndNum", typeof(int));
    
            var indParameter = ind != null ?
                new ObjectParameter("Ind", ind) :
                new ObjectParameter("Ind", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var regParameter = reg != null ?
                new ObjectParameter("Reg", reg) :
                new ObjectParameter("Reg", typeof(string));
    
            var indicatorParameter = indicator != null ?
                new ObjectParameter("Indicator", indicator) :
                new ObjectParameter("Indicator", typeof(string));
    
            var hazardParameter = hazard.HasValue ?
                new ObjectParameter("Hazard", hazard) :
                new ObjectParameter("Hazard", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrink", indNumParameter, indParameter, unitsParameter, regParameter, indicatorParameter, hazardParameter);
        }
    
        public virtual int UpdateEmp(Nullable<int> codeEmp, string surname, string name, string midlName, string post, string num)
        {
            var codeEmpParameter = codeEmp.HasValue ?
                new ObjectParameter("CodeEmp", codeEmp) :
                new ObjectParameter("CodeEmp", typeof(int));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var midlNameParameter = midlName != null ?
                new ObjectParameter("MidlName", midlName) :
                new ObjectParameter("MidlName", typeof(string));
    
            var postParameter = post != null ?
                new ObjectParameter("Post", post) :
                new ObjectParameter("Post", typeof(string));
    
            var numParameter = num != null ?
                new ObjectParameter("Num", num) :
                new ObjectParameter("Num", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmp", codeEmpParameter, surnameParameter, nameParameter, midlNameParameter, postParameter, numParameter);
        }
    
        public virtual int UpdatePlace(Nullable<int> placNum, string title, string address, Nullable<int> subTIN)
        {
            var placNumParameter = placNum.HasValue ?
                new ObjectParameter("PlacNum", placNum) :
                new ObjectParameter("PlacNum", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var subTINParameter = subTIN.HasValue ?
                new ObjectParameter("SubTIN", subTIN) :
                new ObjectParameter("SubTIN", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePlace", placNumParameter, titleParameter, addressParameter, subTINParameter);
        }
    
        public virtual int UpdateSub(Nullable<int> subTIN, string nameOrg, string checAcc, string dir, string address, string num, Nullable<int> corres)
        {
            var subTINParameter = subTIN.HasValue ?
                new ObjectParameter("SubTIN", subTIN) :
                new ObjectParameter("SubTIN", typeof(int));
    
            var nameOrgParameter = nameOrg != null ?
                new ObjectParameter("NameOrg", nameOrg) :
                new ObjectParameter("NameOrg", typeof(string));
    
            var checAccParameter = checAcc != null ?
                new ObjectParameter("ChecAcc", checAcc) :
                new ObjectParameter("ChecAcc", typeof(string));
    
            var dirParameter = dir != null ?
                new ObjectParameter("Dir", dir) :
                new ObjectParameter("Dir", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var numParameter = num != null ?
                new ObjectParameter("Num", num) :
                new ObjectParameter("Num", typeof(string));
    
            var corresParameter = corres.HasValue ?
                new ObjectParameter("Corres", corres) :
                new ObjectParameter("Corres", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSub", subTINParameter, nameOrgParameter, checAccParameter, dirParameter, addressParameter, numParameter, corresParameter);
        }
    
        public virtual int UpdateVolume(Nullable<int> volNum, Nullable<int> totalVol, Nullable<decimal> price, Nullable<int> totalMon)
        {
            var volNumParameter = volNum.HasValue ?
                new ObjectParameter("VolNum", volNum) :
                new ObjectParameter("VolNum", typeof(int));
    
            var totalVolParameter = totalVol.HasValue ?
                new ObjectParameter("TotalVol", totalVol) :
                new ObjectParameter("TotalVol", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var totalMonParameter = totalMon.HasValue ?
                new ObjectParameter("TotalMon", totalMon) :
                new ObjectParameter("TotalMon", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVolume", volNumParameter, totalVolParameter, priceParameter, totalMonParameter);
        }
    }
}
